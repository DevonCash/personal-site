---
// CommentSection.astro
interface Props {
  sectionId: string;
}

const { sectionId } = Astro.props;
---

<section class="commentable-section" data-section-id={sectionId}>
  <div class="content">
    <slot />
  </div>

  <dialog class="comment-dialog">
    <form class="comment-form">
      <div class="selected-text-display full">
        <h3>Comment on:</h3>
        <blockquote></blockquote>
      </div>

      <div class="form-group">
        <label>Email <small>(required, not displayed)</small></label>
        <input type="email" name="email" required />
      </div>
      <div class="form-group">
        <label>Name <small>(optional)</small></label>
        <input type="text" name="name" />
      </div>
      <input
        type="text"
        name="honeypot"
        class="honeypot"
        tabindex="-1"
        autocomplete="off"
      />

      <div class="form-group full">
        <label>Your comment</label>
        <textarea name="content" required rows="4"></textarea>
      </div>

      <input type="hidden" name="selectedText" />
      <input type="hidden" name="timestamp" />

      <div class="button-group full">
        <button type="button" class="cancel-btn">Cancel</button>
        <button type="submit" class="submit-btn">Post Comment</button>
      </div>
    </form>
  </dialog>

  <h3>Comments</h3>
  <div class="comments-list">
    <p>Loading comments...</p>
  </div>
</section>
<script>
  const el = <T extends Element>(
    selector: string,
    node: ParentNode = document.body
  ): T | null => node.querySelector(selector);
  const els = <T extends Element>(
    selector: string,
    node: ParentNode = document.body
  ): NodeListOf<T> => node.querySelectorAll(selector);
  const on = (target: any, event: string, handler: any) =>
    target.addEventListener(event, handler);

  class CommentSection {
    section: any;
    sectionId: any;
    content: any;
    dialog: any;
    form: any;
    commentsList: any;
    selectedTextDisplay: any;
    cancelBtn: any;
    submitBtn: any;
    highlightableContent: any;
    commentLocations: Map<any, any>;

    constructor(element: HTMLElement) {
      this.section = element;
      this.sectionId = element.dataset.sectionId;
      this.content = el(".content", element);
      this.dialog = el(".comment-dialog", element);
      this.form = el(".comment-form", element);
      this.commentsList = el(".comments-list", element);
      this.selectedTextDisplay = el(
        ".selected-text-display blockquote",
        element
      );
      this.cancelBtn = el(".cancel-btn", element);
      this.submitBtn = el(".submit-btn", element);

      this.highlightableContent = el(".content", element)?.innerHTML;
      this.commentLocations = new Map();

      this.loadUserInfo();
      this.initializeListeners();
      this.loadComments();
    }

    loadUserInfo() {
      const storedInfo = localStorage.getItem("commenter-info");
      if (!storedInfo) return;

      try {
        const { name, email } = JSON.parse(storedInfo);
        el<HTMLInputElement>('[name="name"]', this.form)!.value = name;
        el<HTMLInputElement>('[name="email"]', this.form)!.value = email;
      } catch (error) {
        console.error("Error loading user info:", error);
      }
    }

    saveUserInfo() {
      const data = new FormData(this.form);
      const name = data.get("name");
      const email = data.get("email");

      localStorage.setItem("commenter-info", JSON.stringify({ name, email }));
    }

    initializeListeners() {
      on(this.cancelBtn, "click", () => this.closeDialog());
      on(this.form, "submit", (e: SubmitEvent) => this.handleSubmit(e));

      on(document, "mouseup", (e: MouseEvent) => {
        if (this.dialog.open) return;
        this.handleSelection(e);
      });

      // Close floating button when clicking outside, or toggle dialog when clicking on it
      on(document, "mousedown", (e: MouseEvent) => {
        const button = (e.target as Element)?.closest<HTMLButtonElement>(
          ".floating-comment-button"
        );
        if (button) {
          this.openCommentDialog(button.value);
          this.dialog.showModal();
        }
        this.removeAddCommentButton();
      });
    }

    handleSelection(event: MouseEvent) {
      const selection = window.getSelection();
      const text = selection?.toString().trim();

      if (text && (event.target as Element)?.closest(".content")) {
        this.showAddCommentButton(event, text);
      } else {
        this.removeAddCommentButton();
      }
    }

    showAddCommentButton(event: MouseEvent, selectedText: string) {
      this.removeAddCommentButton();

      const button = document.createElement("button");
      button.textContent = "Add Comment";
      button.className = "floating-comment-button";
      button.style.position = "absolute";
      button.style.left = `${event.pageX + 10}px`;
      button.style.top = `${event.pageY + 10}px`;
      button.value = selectedText;

      document.body.appendChild(button);
    }

    removeAddCommentButton() {
      el(".floating-comment-button")?.remove();
    }

    openCommentDialog(selectedText: string) {
      const limitTextLength = (text: string, maxLength: number) => {
        const words = text.split(" ");
        if (words.length <= maxLength) return text;
        const start = words.slice(0, Math.floor(maxLength / 2)).join(" ");
        const end = words.slice(-Math.floor(maxLength / 2)).join(" ");
        return `${start} ... ${end}`;
      };

      this.selectedTextDisplay.textContent = limitTextLength(selectedText, 50);
      this.form.selectedText.value = selectedText;
      this.dialog.showModal();
    }

    scrollToComment(commentId: any) {
      const comment = el(`[data-comment-id="${commentId}"]`, this.commentsList);
      if (!comment) return;

      comment.scrollIntoView({ behavior: "smooth", block: "center" });
      comment.classList.add("highlighted");
      setTimeout(() => {
        comment.classList.remove("highlighted");
      }, 2000);
    }

    async handleSubmit(e: { preventDefault: () => void }) {
      e.preventDefault();
      this.submitBtn.disabled = true;
      this.submitBtn.textContent = "Posting...";

      const formData = new FormData(this.form);
      formData.append("timestamp", Date.now().toString());

      const body = JSON.stringify(Object.fromEntries(formData.entries()));

      try {
        const response = await fetch(`/api/comments/${this.sectionId}`, {
          method: "POST",
          body,
          headers: {
            "Content-Type": "application/json",
          },
        });

        if (!response.ok) {
          throw new Error("Failed to submit comment");
        }

        this.saveUserInfo();
        await this.loadComments();
        this.closeDialog();
        this.form.reset();
        this.loadUserInfo();
      } catch (error) {
        console.error("Error submitting comment:", error);
        alert("Failed to submit comment. Please try again.");
      } finally {
        this.submitBtn.disabled = false;
        this.submitBtn.textContent = "Post Comment";
      }
    }

    closeDialog() {
      this.dialog.close();
      this.removeAddCommentButton();
    }

    async loadComments() {
      try {
        const response = await fetch(`/api/comments/${this.sectionId}`);
        const comments = await response.json();

        this.content.innerHTML = this.highlightableContent;
        this.commentLocations.clear();

        this.commentsList.innerHTML = !comments.length
          ? "<p><em>No comments yet.</em></p>"
          : comments
              ?.map(
                (
                  comment: {
                    selectedText: any;
                    name: any;
                    timestamp: string | number | Date;
                    content: any;
                  },
                  index: number
                ) => {
                  const commentId = `comment-${this.sectionId}-${index}`;
                  this.commentLocations.set(commentId, comment.selectedText);

                  return `
            <div class="comment" data-comment-id="${commentId}">
              <div class="comment-header">
                <span class="commenter-name">${comment.name || "Anonymous"}</span>
                <span class="comment-date">
                  ${new Date(comment.timestamp).toLocaleDateString()}
                </span>
              </div>
              <blockquote class="comment-reference">${comment.selectedText}</blockquote>
              <p class="comment-content">${comment.content}</p>
            </div>
          `;
                }
              )
              .join("");

        this.addHighlightListeners();
        this.markCommentedText();
      } catch (error) {
        console.error("Error loading comments:", error);
      }
    }

    markCommentedText() {
      let contentHTML = this.content.innerHTML;

      const locations = Array.from(this.commentLocations.entries()).sort(
        (a, b) => b[1].length - a[1].length
      );

      locations.forEach(([commentId, text]) => {
        const escapedText = text.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
        const regex = new RegExp(`(${escapedText})`, "g");
        contentHTML = contentHTML.replace(
          regex,
          `<span class="commentable-text" data-comment-id="${commentId}">$1</span>`
        );
      });

      this.content.innerHTML = contentHTML;
    }

    addHighlightListeners() {
      els<HTMLElement>(".comment").forEach((comment: HTMLElement) => {
        on(comment, "mouseenter", () =>
          this.highlightText(comment.dataset.commentId)
        );
        on(comment, "mouseleave", () =>
          this.unhighlightText(comment.dataset.commentId)
        );
      });

      const textSpans = this.content.querySelectorAll(".commentable-text");
      textSpans.forEach((span: HTMLSpanElement) => {
        on(span, "mouseenter", () =>
          this.highlightComment(span.dataset.commentId)
        );
        on(span, "mouseleave", () =>
          this.unhighlightComment(span.dataset.commentId)
        );
        on(span, "click", () => this.scrollToComment(span.dataset.commentId));
      });
    }

    highlightText(commentId: any) {
      els<HTMLSpanElement>(`[data-comment-id="${commentId}"]`).forEach((span) =>
        span.classList.add("highlighted")
      );
    }

    unhighlightText(commentId: any) {
      els<HTMLSpanElement>(`[data-comment-id="${commentId}"]`).forEach((span) =>
        span.classList.remove("highlighted")
      );
    }

    highlightComment(commentId: any) {
      const comment = el(`[data-comment-id="${commentId}"]`, this.commentsList);
      comment?.classList.add("highlighted");
    }

    unhighlightComment(commentId: any) {
      const comment = el(`[data-comment-id="${commentId}"]`, this.commentsList);
      comment?.classList.remove("highlighted");
    }
  }

  // Initialize all comment sections
  els<HTMLElement>(".commentable-section").forEach((section) => {
    new CommentSection(section);
  });
</script>
<style>
  :root {
    --comment-primary-color: #3b82f6;
    --comment-text-color: #1f2937;
    --comment-border-color: #e5e7eb;
    --comment-bg-color: #ffffff;
    --comment-hover-bg: #f3f4f6;
    --comment-selection-bg: #dbeafe;
    --comment-error-color: #ef4444;
    --comment-spacing: 1rem;
    --comment-border-radius: 0.375rem;
    --comment-transition: 200ms ease-in-out;
    --comment-highlight-color: rgba(59, 130, 246, 0.1);
  }

  .commentable-section {
    position: relative;
  }

  .content,
  .comment-dialog {
    padding: var(--comment-spacing);
    border-radius: var(--comment-border-radius);
    transition: background-color var(--comment-transition);
  }

  .comment-dialog {
    border: 1px solid var(--comment-border-color);
    max-width: 32rem;
    margin: auto;
    width: 100%;
  }

  .comment-dialog::backdrop {
    background-color: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(2px);
  }

  .comment-form {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 0.5rem;
  }

  .form-group label {
    display: block;
    margin-bottom: 0.5rem;
    font-size: 0.875rem;
    color: var(--comment-text-color);
  }

  .form-group input,
  .form-group textarea {
    width: 100%;
    padding: 0.5rem;
    border: 1px solid var(--comment-border-color);
    border-radius: var(--comment-border-radius);
    font-family: inherit;
    font-size: 1rem;
  }

  .form-group textarea {
    resize: vertical;
  }

  .full {
    grid-column: 1 / -1;
  }

  .honeypot {
    display: none;
  }

  .selected-text-display {
    grid-column: span 2;
    margin-bottom: var(--comment-spacing);
  }

  .selected-text-display h3 {
    font-size: 1rem;
    margin-bottom: 0.5rem;
  }

  .selected-text-display blockquote {
    border-left: 3px solid var(--comment-primary-color);
    padding-left: 1rem;
    margin: 0;
    color: var(--comment-text-color);
    font-style: italic;
  }

  .button-group {
    display: flex;
    justify-content: flex-end;
    gap: 0.5rem;
  }

  .button-group button {
    padding: 0.5rem 1rem;
    border-radius: var(--comment-border-radius);
    font-size: 0.875rem;
    cursor: pointer;
    transition: opacity var(--comment-transition);
  }

  .cancel-btn {
    border: 1px solid var(--comment-border-color);
    background: var(--comment-bg-color);
    color: var(--comment-text-color);
  }

  .submit-btn {
    border: none;
    background: var(--comment-primary-color);
    color: white;
  }

  .submit-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .floating-comment-button {
    position: fixed;
    z-index: 1000;
    padding: 0.5rem 1rem;
    background-color: var(--comment-primary-color);
    color: white;
    border: none;
    border-radius: var(--comment-border-radius);
    cursor: pointer;
    font-size: 0.875rem;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    animation: fadeIn 0.2s ease-out;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(5px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .commentable-text {
    border-bottom: 2px dotted transparent;
    transition: all 0.2s ease-in-out;
    cursor: pointer;
  }

  .commentable-text:hover,
  .commentable-text.highlighted {
    background-color: var(--comment-highlight-color);
    border-bottom-color: var(--comment-primary-color);
  }

  .comments-list {
    margin-top: calc(var(--comment-spacing) * 2);
  }

  .comment {
    padding: var(--comment-spacing);
    border-left: 2px solid var(--comment-primary-color);
    margin-bottom: var(--comment-spacing);
    background: var(--comment-bg-color);
    transition: all 0.2s ease-in-out;
    position: relative;
    border-radius: 0 var(--comment-border-radius) var(--comment-border-radius) 0;
  }

  .comment.highlighted {
    background-color: var(--comment-highlight-color);
    transform: translateX(0.5rem);
    animation: highlightPulse 2s ease-in-out;
  }

  .comment-header {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-bottom: 0.5rem;
  }

  .commenter-name {
    font-weight: 500;
    font-size: 0.875rem;
    color: var(--comment-text-color);
  }

  .comment-date,
  .comment-reference {
    font-size: 0.75rem;
    color: #666;
  }

  .comment-reference {
    margin: 0.5rem 0;
    padding-left: 0.75rem;
    border-left: 2px solid var(--comment-border-color);
    font-style: italic;
  }

  .comment-content {
    margin: 0;
    line-height: 1.5;
    color: var(--comment-text-color);
  }

  button:focus,
  input:focus,
  textarea:focus {
    outline: 2px solid var(--comment-primary-color);
    outline-offset: 2px;
  }

  button:focus:not(:focus-visible),
  input:focus:not(:focus-visible),
  textarea:focus:not(:focus-visible) {
    outline: none;
  }

  .cancel-btn:hover {
    background-color: var(--comment-hover-bg);
  }

  .submit-btn:hover:not(:disabled),
  .floating-comment-button:hover {
    opacity: 0.9;
    transform: translateY(-1px);
  }

  @media (prefers-color-scheme: dark) {
    :root {
      --comment-text-color: #e5e7eb;
      --comment-border-color: #374151;
      --comment-bg-color: #1f2937;
      --comment-hover-bg: #374151;
      --comment-selection-bg: #1e3a8a;
      --comment-highlight-color: rgba(59, 130, 246, 0.2);
    }

    .comment-date,
    .comment-reference {
      color: #9ca3af;
    }

    .comment-reference {
      border-left-color: #4b5563;
    }

    .floating-comment-button {
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
    }
  }

  @media (max-width: 640px) {
    .comment-dialog {
      margin: 1rem;
      width: calc(100% - 2rem);
    }

    .button-group {
      flex-direction: column;
    }

    .button-group button {
      width: 100%;
    }

    .comment {
      padding: 0.75rem;
    }

    .floating-comment-button {
      padding: 0.5rem 0.75rem;
      font-size: 0.8125rem;
    }
  }

  @media print {
    .commentable-text {
      border-bottom: none;
      background: none !important;
    }

    .floating-comment-button {
      display: none;
    }

    .comment {
      break-inside: avoid;
      border: 1px solid #ddd;
      margin: 1rem 0;
      page-break-inside: avoid;
    }
  }
</style>
